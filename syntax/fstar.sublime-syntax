%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: FStar
file_extensions:
  - fst
  - fsti
uuid: 3946ceee-9f02-11e8-b858-f7be08bc9a82
scope: source.fst

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: numbers
    - include: strings
    - include: operators

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|then|else|for|type|assume|Lemma|in|requires|ensures|fun)\b'
      scope: keyword.control.source.fst
    - match: '\b(let|val)\b'
      scope: keyword.control.source.fst
      push:
        - meta_scope: entity.name.function.source.fst
        - match: '[\s\w]*'
          pop: true
    - match: '\b(open|module)\b'
      scope: keyword.control.source.fst
      push:
        - meta_scope: entity.name.type.source.fst
        - match: $\n?
          pop: true

  operators:
    - match: '(->|<-)'
      scope: storage.type.function.source.fst
    - match: '(\+|-|\*|\/|\%)(?!>)'
      scope: keyword.operator.source.fst

  numbers:
    - match: '\b(-)?[0-9]+(.)?[0-9]*\b'
      scope: constant.numeric.source.fst
    - match: '\b0x[0-9a-fA-F]+\b'
      scope: constant.numeric.source.fst

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.source.fst
      push: inside_string


  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.source.fst
    - match: '\.'
      scope: constant.character.escape.source.fst
    - match: '"'
      scope: punctuation.definition.string.end.source.fst
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.source.fst
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.source.fst
        - match: $\n?
          pop: true
    # Comments begin with a '#' and finish at the end of the line.
    - match: '#'
      scope: punctuation.definition.comment.source.fst
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.source.fst
        - match: $\n?
          pop: true
    # Comments (* comment *).
    - match: '\(\*'
      scope: punctuation.definition.comment.source.fst
      push:
        - meta_scope: comment.block.documentation.source.fst
        - match: '\*\)'
          pop: true
